name: Create Release Tag

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
  push:
    branches:
      - main

jobs:
  auto-bump-version:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          # Get the latest tag, or use v0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Bump minor version
        id: bump_version
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          # Extract version numbers (remove 'v' prefix and any pre-release suffix)
          VERSION=${LATEST_TAG#v}
          VERSION=${VERSION%%-*}

          # Split into major.minor.patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Bump minor version and reset patch to 0
          MINOR=$((MINOR + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.0"

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run tests
        run: go test ./...

      - name: Build binary
        run: go build -v ./cmd/godevwatch

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.bump_version.outputs.new_version }}" -m "Auto-release ${{ steps.bump_version.outputs.new_version }}"
          git push origin "${{ steps.bump_version.outputs.new_version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.new_version }}
          release_name: Release ${{ steps.bump_version.outputs.new_version }}
          body: |
            ## Installation

            ```bash
            go install github.com/kyco/godevwatch/cmd/godevwatch@${{ steps.bump_version.outputs.new_version }}
            ```

            See the [README](https://github.com/kyco/godevwatch#readme) for usage instructions.
          draft: false
          prerelease: false

  create-tag:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Error: Version must follow semantic versioning (e.g., v1.0.0, v1.0.0-beta.1)"
            exit 1
          fi

      - name: Check if tag already exists
        run: |
          if git rev-parse "${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo "Error: Tag ${{ github.event.inputs.version }} already exists"
            exit 1
          fi

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run tests
        run: go test ./...

      - name: Build binary
        run: go build -v ./cmd/godevwatch

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ github.event.inputs.version }}" -m "Release ${{ github.event.inputs.version }}"
          git push origin "${{ github.event.inputs.version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          body: |
            ## Installation

            ```bash
            go install github.com/kyco/godevwatch/cmd/godevwatch@${{ github.event.inputs.version }}
            ```

            See the [README](https://github.com/kyco/godevwatch#readme) for usage instructions.
          draft: false
          prerelease: ${{ contains(github.event.inputs.version, '-') }}
